accuracy <- 1-sum(test$visitsTumblr>pred$upper[,2])/length(test$visitsTumblr)
plot(fcast)
accuracy(fcast,test$visitsTumblr)
accuracy <- 1-sum(testing$visitsTumblr>pred$upper[,2])/length(testing$visitsTumblr)
accuracy
accuracy <- 1-sum(test$visitsTumblr>pred$upper[,2])/length(test$visitsTumblr)
accuracy
library(e1071)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
svmFit <- svm(CompressiveStrength ~ ., data = training)
svmPred <- predict(svmFit,testing)
accuracy(svmPred, testing$CompressiveStrength)
accuracy
downloadcsv <- function(url, nastrings) {
temp <- tempfile()
download.file(url, temp, method = "curl")
data <- read.csv(temp, na.strings = nastrings)
unlink(temp)
return(data)
}
trainurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
train <- downloadcsv(trainurl, c("", "NA", "#DIV/0!"))
testurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
test <- downloadcsv(testurl, c("", "NA", "#DIV/0!"))
names(train)
urlTrain <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
if(!file.exists("pml-training.csv")){
download.file(urlTrain, "pml-training.csv", method = "curl")
}
training <- read.csv("pml-training.csv")
urlTest <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if(!file.exists("pml-testing.csv")){
download.file(urlTest, "pml-testing.csv", method = "curl")
}
testing <- read.csv("pml-testing.csv")
dim(training); dim(testing)
removeMiss <- function(data){
words <- c("kurtosis", "var", "skewness", "stddev", "avg", "amplitude", "min", "max")
index <- c()
for(word in words){
index <- append(index, grep(word, names(data)))
}
ts <- data[,-index]
return(ts)
}
tr <- removeMiss(training)
ts <- removeMiss(testing)
# Removing features with ID information and time
names(tr[,c(1:7)])
library(caret)
set.seed(3234)
inTrain <- createDataPartition(tr$classe, p = 0.7, list = FALSE)
train <- tr[inTrain,]
test <- tr[-inTrain,]
set.seed(3234)
modelFit <- train(classe ~ ., data = train,
method = "rf",
trControl = trainControl(method = "cv", number = 4))
library(randomForest)
pred <- predict(modelFit$finalModel, newdata = test)
confusionMatrix(test$classe, pred)
removeMiss <- function(data){
words <- c("kurtosis", "var", "skewness", "stddev", "avg", "amplitude", "min", "max")
index <- c()
for(word in words){
index <- append(index, grep(word, names(data)))
}
ts <- data[,-index]
return(ts)
}
tr <- removeMiss(training)
ts <- removeMiss(testing)
# Removing features with ID information and time
names(tr[,c(1:7)])
tr <- tr[,-c(1:7)]
ts <- ts[,-c(1:7)]
dim(tr); dim(ts)
library(caret)
set.seed(3234)
inTrain <- createDataPartition(tr$classe, p = 0.7, list = FALSE)
train <- tr[inTrain,]
test <- tr[-inTrain,
train <- tr[inTrain,]
test <- tr[-inTrain,]
train <- tr[inTrain,]
test <- tr[-inTrain,]
set.seed(3234)
modelFit <- train(classe ~ ., data = train,
method = "rf",
trControl = trainControl(method = "cv", number = 4))
library(randomForest)
pred <- predict(modelFit$finalModel, newdata = test)
confusionMatrix(test$classe, pred)
predict(modelFit$finalModel, newdata = ts)
answers <- predict(model, cleanTestingdata)
answers <- as.character(answers)
answers
answers <- predict(modelFit$finalModel, newdata = ts)
answers <- as.character(answers)
answers
answers <- as.character(answers)
answers
pml_write_files = function(x) {
n = length(x)
for (i in 1:n) {
filename = paste0("problem_id_", i, ".txt")
write.table(x[i], file = filename, quote = FALSE, row.names = FALSE,
col.names = FALSE)
}
}
pml_write_files(answers)
savehistory("C:/Neeraj/Online Courses/Online Courses/Data Sciences/PML_project.R")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyServer(
function(input, output) {
}
)
runApp()
diabetesRisk <- function(glucose) glucose/200
getwd("uI.R")
getwd9)
getwd()
getwd("ui.R")
ui.r
ui.R
install.packages("manipulate")
install.packages("manipulate")
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR); data(galton)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(15,25))
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR); data(galton)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("Imbalance = ", round(mse, 2)))
}
> manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
Error in FUN("rs_createUUID"[[1L]], ...) : no such symbol rs_createUUID
library(UsingR); data(galton)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("Imbalance = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
Error in FUN("rs_createUUID"[[1L]], ...) : no such symbol rs_createUUID
library(UsingR); data(galton)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("Imbalance = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(15,25))
cars
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(15,25))
install.packages("relax")
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(15,25))
library("aplpack", lib.loc="~/R/win-library/3.1")
detach("package:aplpack", unload=TRUE)
install.packages("aplpack")
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(15,25))
library(manipulate)
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(15,25))
manipulate(
barplot(as.matrix(longley[,factor]),
beside = TRUE, main = factor),
factor = picker("GNP", "Unemployed", "Employed"))
manipulate(
boxplot(Freq ~ Class, data = Titanic, outline = outline),
outline = checkbox(FALSE, "Show outliers"))
manipulate(
plot(cars, xlim = c(0, x.max), type = type, ann = label),
x.max = slider(10, 25, step=5, initial = 25),
type = picker("Points" = "p", "Line" = "l", "Step" = "s"),
label = checkbox(TRUE, "Draw Labels"))
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$save('fig/n1.html', cdn = TRUE)
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$save('fig/n1.html', cdn = TRUE)
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$save('fig/n1.html', cdn = TRUE)
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
n1
n1$.->container
n1$html()
```
```
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$save('fig/n1.html', cdn = TRUE)
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
```
HairEyeColor
```
n1$save('fig/n1.html', cdn = TRUE)
names(iris) = gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$save('fig/r1.html', cdn = TRUE)
cat('<iframe src="fig/r1.html" width=100%, height=600></iframe>')
require rCharts
require(rCharts)
names(iris) = gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$save('fig/r1.html', cdn = TRUE)
cat('<iframe src="fig/r1.html" width=100%, height=600></iframe>')
suppressPackageStartupMessages(library(googleVis))
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width =
height = 400))
print(G, "chart")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
print(G,"chart")
n1
n1$
n1
G2 <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width = 400,
height = 400, region = "150"))
print(G2, "chart")
library(gvisGeoChart)
detach("package:googleVis", unload=TRUE)
library("googleVis", lib.loc="~/R/win-library/3.1")
library(googlevis)
install.packages("googleVis")
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
print(G,"chart")
G1 <- gvisGeoChart(Exports, locationvar='Country', colorvar='Profit')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
require(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
d
airquality
head(airquality)
setwd("C:/Neeraj/Online Courses/Online Courses/Data Sciences/Developing Data Products/Coursera Project")
library(shiny)
library(devtools)
runApp()
author(Probability_Density_Function_Player)
author("Probability_Density_Function_Player")
setwd ("C/Neeraj/Online Courses/Online Courses/Data Sciences/Developing Data Products/Coursera Project")
setwd ("C/Neeraj/Online Courses/Online Courses/Data Sciences/Developing Data Products/Coursera Project/")
author("Probability_Density_function_Player")
library(slidify)
author("Probability_Density_function_Player")
slidify ("index.RMD")
browseurl("index.html")
browseURL("index.html")
slidify ("index.RMD)")
slidify("index.RMD")
browseURL("index.html")
slidify("index.RMD")
browseURL("index.html")
slidify("index.RMD")
browseURL("index.html")
slidify("index.RMD")
browseURL("index.html")
slidify("index.RMD")
browseURL("index.html")
browseURL("index.html")
>
slidify("index.RMD")
browseURL("index.html")
slidify("index.RMD")
rowseURL("index.html")
browseURL("index.html")
slidify("index.RMD")
browseURL("index.html")
slidify("index.RMD")
browseURL("index.html")
slidify("index.RMD")
browseURL("index.html")
slidify("index.RMD")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify ("index.Rmd")
browseURL("index.html")
slidify ("index.Rmd")
browseURL("index.html")
slidify ("index.Rmd")
browseURL("index.html")
slidify ("index.Rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
6 framework   : html5slides       # {io2012, html5slides, shower, dzslides, ...}
6 framework   : html5slides       # {io2012, html5slides, shower, dzslides, ...}
6 framework   : io2012      # {io2012, html5slides, shower, dzslides, ...}
slidify("index.rmd")
browseURL("index.html")
2. Plotting and Calculation of PDF's and umulative density function (CDF) using various distribution functions
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseurl("index.html")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
slidify("index.rmd")
slidify("index.rmd")
slidify("index.rmd"
slidify("index.rmd")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
slidify("index.rmd")
browseURL("index.html")
publish(user = "neeraj-k", repo = "Developing-Data-Products")
publish(user = "neeraj-k", repo = "Developing-Data-Products")
publish_github(neeraj-k,Developing-Data-Products)
publish_github("neeraj-k","Developing-Data-Products")
publish(user = "neeraj-k", repo = "Developing-Data-Products",host = 'github')
1.library(devtools)
2.install_github('slidify', 'ramnathv')
3.install_github('slidifyLibraries', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
publish(user = "neeraj-k", repo = "Developing-Data-Products",host = 'github')
publish(user = "neeraj-k", repo = "Slidify_PDF",host = 'github')
1. This App will allow you to plot the probability density (pdf) and cumulative density function (CDF) given the change in key parameters (mean, s.d, range etc.) for a certain distribution given the point at which to evaluate the function x
publish(title = 'Probability Density Function Player', 'index.html', host = 'rpubs')
slidify("index.rmd")
browseURL("index.html")
---
title       : Probability Density Function Player
subtitle    : Developing Data Products Project
author      : Neeraj Kulkarni
job         : Data Scientist
framework   : io2012      # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow     #
widgets     : []            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
---
## Goal of the App
1. This App will allow you to plot the probability density (pdf) and cumulative density function (CDF) given the change in key parameters (mean, s.d, range etc.) for a certain distribution given the point at which to evaluate the function x
2. Plotting and Calculation of PDF's and CDF using the various distribution functions
3. Player verison and interactivity to visualize changes in the plots for pdf and cdf
---
## Proposed Analytical Solution
1. PDF and CDF plots for the following distributions:
a) Binomial
b) Chi-sq
c) F
d) Hyper geometric
f) Normal
g) Posisson
h) Student's T
i) Uniform
The solution is a interactive web application that takes in the consideration the parmater changes made to mean, standard deviation, range and number of observations to plot and compute pdf and cdf for a selected distribution function (uniform, poisson etc.)
Shinyapp is on http://neeraj-k.shinyapps.io/Probability_Density_Function_App/ . Please run it thorugh Mozilla or Google Chrome as it works much better
---
## Solution Example
1. For a mean of 12 and s.d of 5 and range between default -5 to 5 for normal distribution functionslidify, the pdf for a given       point value of x=2.5 is 0.0131
This can be seen by inputting the mean and sd and then drawing a imaginary line for x=2.5 and perpendicular from the Y axis to     instersect to get the value of Y(pdf) = 0.0131
Please note the solution is contingent on the distribution being selected (in this case it was normal)
---
## Questions/Feedback
I hope this provides you the ability to plot variety of pdf and cdf functions on the fly and also to estimate their values.
Please provide feedback to neerajk at kulkarni_neeraj@yahoo.com
Have fun with the interactive app!
publish('neeraj-k', 'Slidify_PDF')
